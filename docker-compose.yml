version: "3.7"
services:
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - sonarr:/config
      - share1:/data
      - downloads:/downloads
    ports:
      - "8989:8989"
    depends_on:
      - nzbget
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`${DOMAIN}`) && PathPrefix(`/sonarr`)"
      - "traefik.http.routers.sonarr.middlewares=auth"
      - "traefik.http.routers.sonarr.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
    restart: unless-stopped
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - radarr:/config
      - share1:/data
      - downloads:/downloads
    ports:
      - "7878:7878"
    depends_on:
      - nzbget
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`${DOMAIN}`) && PathPrefix(`/radarr`)"
      - "traefik.http.routers.radarr.middlewares=auth"
      - "traefik.http.routers.radarr.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
    restart: unless-stopped
  radarr4k:
    image: linuxserver/radarr
    container_name: radarr4k
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - radarr4k:/config
      - share1:/data
      - downloads:/downloads
    ports:
      - "7879:7878"
    depends_on:
      - nzbget
      - transmission
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr4k.rule=Host(`${DOMAIN}`) && PathPrefix(`/radarr4k`)"
      - "traefik.http.routers.radarr4k.middlewares=auth"
      - "traefik.http.routers.radarr4k.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
    restart: unless-stopped
  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - nzbget:/config
      - downloads:/downloads
      - intermediate:/intermediate
    ports:
      - "6789:6789"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nzbget.rule=Host(`${DOMAIN}`) && PathPrefix(`/nzbget`)"
      - "traefik.http.routers.nzbget.middlewares=auth"
      - "traefik.http.routers.nzbget.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
  portainer:
    image: portainer/portainer
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`${DOMAIN}`) && PathPrefix(`/portainer`)"
      - "traefik.http.routers.portainer.middlewares=auth"
      - "traefik.http.routers.portainer.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
    restart: unless-stopped
  traefik:
    container_name: traefik
    image: traefik:v2.1.0-rc2
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/htpc-config/traefik/traefik.yaml:/etc/traefik/traefik.yaml
      - /etc/htpc-config/traefik/external.yaml:/etc/traefik/external.yaml
      - /etc/htpc-config/traefik/acme.json:/etc/traefik/acme.json
    labels:
      - "traefik.http.routers.api.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.routers.api.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
    restart: unless-stopped
  ddclient:
    image: linuxserver/ddclient
    container_name: ddclient
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - ddclient:/config
    restart: unless-stopped
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - ombi:/config
    ports:
      - "3579:3579"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=Host(`${DOMAIN}`) && PathPrefix(`/ombi`)"
      - "traefik.http.routers.ombi.middlewares=auth"
      - "traefik.http.routers.ombi.tls.certresolver=htpc"
      - "traefik.http.middlewares.auth.basicauth.users=${HTTP_AUTH}"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.middlewares.testHeader.headers.SSLRedirect=true"
      - "traefik.http.middlewares.testHeader.headers.browserxssfilter=true"
      - "traefik.http.middlewares.testHeader.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.testHeader.headers.STSSeconds=315360000"
      - "traefik.http.middlewares.testHeader.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.testHeader.headers.STSIncludeSubdomains=true"
      - "traefik.http.middlewares.testHeader.headers.STSPreload=true"
      - "traefik.http.middlewares.testHeader.headers.frameDeny=true"
    restart: unless-stopped
volumes:
  # Named config containers
  sonarr:
    name: sonarr
    external: true
  radarr:
    name: radarr
    external: true
  radarr4k:
    name: radarr4k
    external: true
  nzbget:
    name: nzbget
    external: true
  transmission:
    name: transmission
    external: true
  jackett:
    name: jackett
    external: true
  ombi:
    name: ombi
    driver_opts:
      type: none
      device: /home/htpc/.ombi
      o: bind
  portainer_data:
  ddclient:

  # Volumes shared across containers
  # Add more share paths as needed
  downloads:
    name: downloads
    driver_opts:
      type: none
      device: ${DOWNLOADS_PATH}
      o: bind
  intermediate:
    name: intermediate
    driver_opts:
      type: none
      device: ${DOWNLOADS_PATH}/intermediate
      o: bind
  share1:
    name: share1
    driver_opts:
      type: none
      device: ${SHARE_PATH}
      o: bind
